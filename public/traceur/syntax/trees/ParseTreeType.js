// Copyright 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

traceur.define('syntax.trees', function() {
  'use strict';

  /**
   * The types of concrete parse trees.
   *
   * The name of the ParseTreeType must match the name of the class that it
   * applies to. For example the DerivedTree class should use
   * ParseTreeType.DERIVED.
   *
   * @enum {string}
   */
  var ParseTreeType = {
    ARGUMENT_LIST: 'ARGUMENT_LIST',
    ARRAY_LITERAL_EXPRESSION: 'ARRAY_LITERAL_EXPRESSION',
    ARRAY_PATTERN: 'ARRAY_PATTERN',
    ARROW_FUNCTION_EXPRESSION: 'ARROW_FUNCTION_EXPRESSION',
    AWAIT_STATEMENT: 'AWAIT_STATEMENT',
    BINARY_OPERATOR: 'BINARY_OPERATOR',
    BIND_THIS_PARAMETER: 'BIND_THIS_PARAMETER',
    BLOCK: 'BLOCK',
    BREAK_STATEMENT: 'BREAK_STATEMENT',
    CALL_EXPRESSION: 'CALL_EXPRESSION',
    CASE_CLAUSE: 'CASE_CLAUSE',
    CATCH: 'CATCH',
    CLASS_DECLARATION: 'CLASS_DECLARATION',
    CLASS_EXPRESSION: 'CLASS_EXPRESSION',
    COMMA_EXPRESSION: 'COMMA_EXPRESSION',
    CONDITIONAL_EXPRESSION: 'CONDITIONAL_EXPRESSION',
    CONTINUE_STATEMENT: 'CONTINUE_STATEMENT',
    DEBUGGER_STATEMENT: 'DEBUGGER_STATEMENT',
    DEFAULT_CLAUSE: 'DEFAULT_CLAUSE',
    DEFAULT_PARAMETER: 'DEFAULT_PARAMETER',
    DO_WHILE_STATEMENT: 'DO_WHILE_STATEMENT',
    EMPTY_STATEMENT: 'EMPTY_STATEMENT',
    EXPORT_DECLARATION: 'EXPORT_DECLARATION',
    EXPORT_PATH: 'EXPORT_PATH',
    EXPORT_PATH_LIST: 'EXPORT_PATH_LIST',
    EXPORT_PATH_SPECIFIER: 'EXPORT_PATH_SPECIFIER',
    EXPORT_PATH_SPECIFIER_SET: 'EXPORT_PATH_SPECIFIER_SET',
    EXPORT_SPECIFIER: 'EXPORT_SPECIFIER',
    EXPORT_SPECIFIER_SET: 'EXPORT_SPECIFIER_SET',
    EXPRESSION_STATEMENT: 'EXPRESSION_STATEMENT',
    FIELD_DECLARATION: 'FIELD_DECLARATION',
    FINALLY: 'FINALLY',
    FORMAL_PARAMETER_LIST: 'FORMAL_PARAMETER_LIST',
    FOR_EACH_STATEMENT: 'FOR_EACH_STATEMENT',
    FOR_IN_STATEMENT: 'FOR_IN_STATEMENT',
    FOR_STATEMENT: 'FOR_STATEMENT',
    FUNCTION_DECLARATION: 'FUNCTION_DECLARATION',
    GET_ACCESSOR: 'GET_ACCESSOR',
    IDENTIFIER_EXPRESSION: 'IDENTIFIER_EXPRESSION',
    IF_STATEMENT: 'IF_STATEMENT',
    IMPORT_DECLARATION: 'IMPORT_DECLARATION',
    IMPORT_PATH: 'IMPORT_PATH',
    IMPORT_SPECIFIER: 'IMPORT_SPECIFIER',
    LABELLED_STATEMENT: 'LABELLED_STATEMENT',
    LITERAL_EXPRESSION: 'LITERAL_EXPRESSION',
    MEMBER_EXPRESSION: 'MEMBER_EXPRESSION',
    MEMBER_LOOKUP_EXPRESSION: 'MEMBER_LOOKUP_EXPRESSION',
    MISSING_PRIMARY_EXPRESSION: 'MISSING_PRIMARY_EXPRESSION',
    MIXIN: 'MIXIN',
    MIXIN_RESOLVE: 'MIXIN_RESOLVE',
    MIXIN_RESOLVE_LIST: 'MIXIN_RESOLVE_LIST',
    MODULE_DECLARATION: 'MODULE_DECLARATION',
    MODULE_DEFINITION: 'MODULE_DEFINITION',
    MODULE_EXPRESSION: 'MODULE_EXPRESSION',
    MODULE_REQUIRE: 'MODULE_REQUIRE',
    MODULE_SPECIFIER: 'MODULE_SPECIFIER',
    NEW_EXPRESSION: 'NEW_EXPRESSION',
    NULL: 'NULL',
    OBJECT_LITERAL_EXPRESSION: 'OBJECT_LITERAL_EXPRESSION',
    OBJECT_PATTERN: 'OBJECT_PATTERN',
    OBJECT_PATTERN_FIELD: 'OBJECT_PATTERN_FIELD',
    PAREN_EXPRESSION: 'PAREN_EXPRESSION',
    POSTFIX_EXPRESSION: 'POSTFIX_EXPRESSION',
    PROGRAM: 'PROGRAM',
    PROPERTY_NAME_ASSIGNMENT: 'PROPERTY_NAME_ASSIGNMENT',
    PROPERTY_NAME_SHORTHAND: 'PROPERTY_NAME_SHORTHAND',
    QUALIFIED_REFERENCE: 'QUALIFIED_REFERENCE',
    REQUIRES_MEMBER: 'REQUIRES_MEMBER',
    REST_PARAMETER: 'REST_PARAMETER',
    RETURN_STATEMENT: 'RETURN_STATEMENT',
    SET_ACCESSOR: 'SET_ACCESSOR',
    SPREAD_EXPRESSION: 'SPREAD_EXPRESSION',
    SPREAD_PATTERN_ELEMENT: 'SPREAD_PATTERN_ELEMENT',
    STATE_MACHINE: 'STATE_MACHINE',
    SUPER_EXPRESSION: 'SUPER_EXPRESSION',
    SWITCH_STATEMENT: 'SWITCH_STATEMENT',
    THIS_EXPRESSION: 'THIS_EXPRESSION',
    THROW_STATEMENT: 'THROW_STATEMENT',
    TRAIT_DECLARATION: 'TRAIT_DECLARATION',
    TRY_STATEMENT: 'TRY_STATEMENT',
    UNARY_EXPRESSION: 'UNARY_EXPRESSION',
    VARIABLE_DECLARATION: 'VARIABLE_DECLARATION',
    VARIABLE_DECLARATION_LIST: 'VARIABLE_DECLARATION_LIST',
    VARIABLE_STATEMENT: 'VARIABLE_STATEMENT',
    WHILE_STATEMENT: 'WHILE_STATEMENT',
    WITH_STATEMENT: 'WITH_STATEMENT',
    YIELD_STATEMENT: 'YIELD_STATEMENT'
  };

  return {
    ParseTreeType: ParseTreeType
  };
});
